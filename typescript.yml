
Typescript aws cdk:
AWS Cloud Development Kit (AWS CDK) is a toolkit for defining AWS cloud infrastructure in code. 
In short, we can manage the entities that run our application with a coding language weâ€™re familiar with

The AWS Cloud Development Kit (CDK) is an open-source software development framework for defining cloud 
infrastructure in code and provisioning it through AWS CloudFormation. It allows developers to define 
cloud resources using familiar programming languages such as TypeScript, JavaScript, Python, Java, and C#/.NET.

Key features of the AWS CDK include:

1.High-level Constructs: The CDK provides pre-built, high-level constructs for common AWS services, making it easier to define complex architectures using simple code.
2.Programming Languages: Developers can use their preferred programming language to define cloud 
infrastructure, enabling them to leverage their existing skills and tools.
3.Infrastructure as Code (IaC): With the CDK, infrastructure is defined as code, allowing teams 
to manage and version their infrastructure alongside application code.
4.Automatic Code Generation: The CDK generates CloudFormation templates based on the code written 
by developers, eliminating the need to write JSON or YAML templates manually.
5.Integration with AWS Services: The CDK integrates seamlessly with other AWS services, enabling 
developers to provision and manage resources across multiple AWS accounts and regions.
6.Custom Constructs: Developers can create custom constructs to encapsulate reusable patterns or 
configurations, promoting code reusability and maintainability.

Overall, the AWS CDK simplifies the process of provisioning and managing AWS resources by allowing 
developers to define infrastructure using familiar programming languages and tools, while also 
providing the benefits of infrastructure as code and integration with AWS services


Constructs:
Constructs are the basic building blocks of AWS CDK applications. They are cloud components that 
encapsulate AWS resources and application logic, providing a high-level abstraction over AWS 
CloudFormation resources. Constructs make it easier to define complex AWS infrastructure using code

-> encapsulation refers to the concept of bundling together all the necessary components and 
configurations of an AWS resource (or a group of resources) into a single, reusable unit called a 
construct
-> encapsulation hides the complexity and details of the underlying infrastructure, providing a simplified
and consistent interface for developers to interact with
-> Encapsulation in constructs promotes reusability and modularity,can be defined once and reused
 multiple times across different parts of an application or even across different projects, ensuring 
 consistency and reducing duplication of code

Key Concepts of Constructs:
1.Encapsulation:
Constructs encapsulate one or more AWS resources, providing a simple, reusable, and configurable 
interface. For example, a construct could encapsulate an S3 bucket with certain predefined properties.
2.Hierarchy:
Constructs can be composed together to form a hierarchy. This means you can build more complex 
constructs by combining simpler ones. For example, you could create a construct for an application 
that includes an S3 bucket, a Lambda function, and an API Gateway.
3.Reusability:
Constructs are reusable components. You can create a construct once and use it in multiple places 
in your application or even share it across different projects.
4.Configuration:
Constructs can be configured through properties and methods. This allows you to customize the behavior 
and settings of the underlying AWS resources.

-----------------------------------------------------------------
Types of Constructs:
1.L1 (Level 1) Constructs: Define Every setting

These are low-level constructs that directly represent AWS CloudFormation resources.
They are automatically generated from the AWS CloudFormation Resource Specification.
Example: s3.CfnBucket (a direct representation of the CloudFormation AWS::S3::Bucket resource).

import * as cdk from 'aws-cdk-lib';
import { CfnBucket } from 'aws-cdk-lib/aws-s3'; // L1 construct for S3 bucket
import { Construct } from 'constructs';

class MyStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    new CfnBucket(this, 'MyL1Bucket', {
      bucketName: 'my-l1-bucket'
    });
  }
}

const app = new cdk.App();
new MyStack(app, 'MyStack');
app.synth();


2.L2 (Level 2) Constructs: Most Commonly used 

These provide a higher level of abstraction over L1 constructs.
They simplify common use cases by providing sensible defaults and convenience methods.
Example: s3.Bucket (an abstraction over the s3.CfnBucket that provides methods like grantRead).

import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';

class MyStack extends cdk.Stack {
  constructor(scope: cdk.App, id: string) {
    super(scope, id);

    // Create an S3 bucket using a Level 2 construct
    const bucket = new s3.Bucket(this, 'MyBucket', {
      versioned: true,
    });

    // Additional resources and logic can be added here
  }
}

const app = new cdk.App();
new MyStack(app, 'MyStack');
app.synth();



3.L3 (Level 3) Constructs: Limted Control, It Integrates with 2 or more services

These are even higher-level abstractions, often representing patterns or best practices.
They can encompass multiple L2 constructs to provide complete, opinionated solutions.
Example: A construct that sets up a complete web application stack with an S3 bucket, Lambda functions, and API Gateway

import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { ServerlessApp } from 'cdk-serverless-patterns'; // Hypothetical L3 construct for a serverless app

class MyServerlessStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    new ServerlessApp(this, 'MyServerlessApp', {
      apiGatewayProps: {
        restApiName: 'MyServerlessAPI'
      },
      lambdaFunctionProps: {
        runtime: cdk.aws_lambda.Runtime.NODEJS_14_X,
        handler: 'index.handler',
        code: cdk.aws_lambda.Code.fromAsset('lambda')
      }
    });
  }
}

const app = new cdk.App();
new MyServerlessStack(app, 'MyServerlessStack');
app.synth();

------------------------------------------------------------------

Stacks:
Stacks in AWS CDK provide a structured way to define and manage your AWS resources. By encapsulating your
infrastructure in stacks, you can better manage and deploy your resources as single units. With advanced
features like cross-stack references and nested stacks, CDK offers powerful tools to manage complex 
infrastructures efficiently

Collections of Constructs or Containers of pieces of infra or constructs
we can pass the parameter into stacks
if we intitialize the stacks, it will come up with new library and create slack in \bin folder and 
we can write all config like construct in single stack in lib

Key Concepts of CDK Stacks:
Stack Class: A stack is represented by the Stack class in the CDK. You define your resources inside a class that extends Stack.

App Class: The root construct of a CDK app is an instance of the App class. The App class is the entry point of the CDK application, which can contain one or more stacks.

Environment: A stack can be deployed to a specific AWS account and region. This can be specified in the stack properties.


There are you types of stacks:
1.Primary Stacks:
These are the main stacks that directly define and manage AWS resources. They are typically defined 
in your CDK application to deploy the required infrastructure.

2.Nested Stacks:
Nested stacks are stacks within stacks. They allow you to break down a large stack into smaller, more manageable sub-stacks. This can be useful for modularizing your infrastructure code

3.Cross-Environment Stacks:
Stacks that are deployed to different AWS environments (accounts and/or regions). This approach is useful for deploying infrastructure across multiple environments such as development, staging, and production

4.Cross-Stack References:
These allow resources in one stack to be referenced in another stack. This is useful for creating dependencies between stacks

5.Pipeline Stacks:
Stacks specifically designed to be part of a CI/CD pipeline. These stacks are often used with AWS CodePipeline and other deployment tools to automate the deployment process.

Apps:
Collection of different Stacks in the project

->Binary are the files that exceutes the order you want to deploy, bin contains ur app, only one app per project
->Lib are where you intilaize what you want to deploy, lib contains ur stacks
->test means you are not actually deploying the infra but you can test the code without building. using 
 unit test, it will validate CFT template that the resource will get created are not
->cdk.out directory is where the AWS CloudFormation templates and other assets generated by the CDK are stored. When you run cdk synth, cdk deploy, or cdk diff, the CDK generates the CloudFormation templates and stores them in the cdk.out directory

cdk.json: It tells the system how it should run 
jest.config.json: config of test files

The AWS Cloud Development Kit (CDK) Command Line Interface (CLI) provides a suite of commands to manage and deploy your CDK applications. Here is a detailed explanation of the most commonly used CDK CLI commands:

1. cdk init: Initializes a new CDK project. It sets up the necessary files and directory structure.

cdk init app --language typescript
This command initializes a new CDK application in TypeScript.

2. cdk synth (or cdk synthesize): Synthesizes the CDK app into an AWS CloudFormation template.

cdk synth
Generates the CloudFormation template and saves it in the cdk.out directory.

3. cdk deploy: Deploys the specified stack(s) to AWS CloudFormation.

cdk deploy
Deploys all stacks in the CDK app.

4. cdk destroy: Destroys the specified stack(s). This deletes the AWS resources associated with the stack.

cdk destroy
Deletes all stacks in the CDK app.

5. cdk diff: Compares the deployed stack with the current state in your CDK app and displays a diff.

cdk diff
Shows the differences between the deployed stack and the local state.

6. cdk ls (or cdk list): Lists all the stacks in your CDK app.

cdk ls
Lists all stacks defined in your CDK app.

7. cdk bootstrap: Bootstraps the CDK environment, which sets up the initial resources needed for deploying stacks (like an S3 bucket for storing assets).

cdk bootstrap aws://123456789012/us-east-1
Bootstraps the AWS account and region specified.

8. cdk doctor: Checks your CDK setup and reports any potential problems.

cdk doctor
Runs diagnostics on your CDK environment.

9. cdk context: Manages cached context values. Useful for updating cached values that CDK relies on.

cdk context --clear
Clears all cached context values.

10. cdk metadata: Displays metadata about a stack, including information about the constructs and resources defined in it.

cdk metadata MyStack
Displays metadata for the stack named MyStack.

11. cdk deploy --hotswap
Usage: cdk deploy --hotswap [STACKS...]

Description: Deploys the specified stack(s) with hot swapping, a faster deployment method for some changes.

Example:

sh
Copy code
cdk deploy --hotswap
Deploys with hot swapping enabled.

Options
Many CDK CLI commands support a variety of options to customize their behavior. Some common options include:

--profile [PROFILE]: Specifies the AWS CLI profile to use.
--region [REGION]: Specifies the AWS region to use.
--verbose: Enables verbose logging.
--all: Applies the command to all stacks in the app (useful with deploy, destroy, etc.).
--force: Forces a command to proceed without prompting for confirmation (use with caution).
we have to update the cdk frequently:

npm install -g aws-cdk

when you bootstrap all the cdk registry to s3 bucket in ur account it stores the config and all the assets 
of cdk to access the cdk quickly from ur account like tf.state

cdk bootstrap --profile aws-profile-name

Reference:
https://docs.aws.amazon.com/cdk/v2/guide/work-with-cdk-typescript.html

https://gefyra.co/getting-started-with-aws-cdk-in-typescript/

https://stackoverflow.com/questions/4037939/powershell-says-execution-of-scripts-is-disabled-on-this-system

https://constructs.dev/packages/@aws-cdk/aws-codebuild/v/1.204.0?lang=typescript

Installation:

1.Install nodeJS and npm:

https://nodejs.org/dist/v20.14.0/node-v20.14.0-x64.msi

2. Add the Path in Environmental Variable:

C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Node.js

3.Verify in VSC that npm and node installed:
node -v
npm -v 

4.Install TypeScript:
npm install -g typescript

Keep TypeScript up to date with a regular:
npm update -g typescript

5.Create Project:
mkdir demo
cd demo
aws configure
npm install -g aws-cdk

cdk init app --language typescript

mkdir my-cdk-app
cd my-cdk-app
Open your poweshell Run As Admin:
Set-ExecutionPolicy RemoteSigned
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

execute this cmd if your are facing issue:

Go to Windows setting -> For Developer -> PowerShell -> change execution policy On

Execute this in VSC:
cdk init app --language typescript

Alternative For Temprory Use if about steps are not configured:
powershell -ExecutionPolicy Bypass -Command "cdk init app --language typescript"

npm update -g typescript
cdk synth
cdk bootstrap aws://<account-name>/ap-south-1

cdk deploy
cdk deploy MyCdkAppStack MyNewCdkAppStack --app "npx ts-node bin/my-cdk-app.ts"
cdk destroy
cdk destroy MyCdkAppStack MyNewCdkAppStack --app "npx ts-node bin/my-cdk-app.ts"

cdk migrate --stack-name name-of-folder-to-create --language typescript --from-path path-of-yaml-cft-file

Example:

import * as cdk from 'aws-cdk-lib';
import { Bucket, CfnBucket } from 'aws-cdk-lib/aws-s3';
import { Construct } from 'constructs';

export class MyCdkDemoAppStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // L1 and L2 Construct of an S3 Bucket
    const level1S3Bucket = new CfnBucket(this, 'MyFirstLevel1ConstructBucket', {
      versioningConfiguration: {
        status: "Enabled"
      }
    });

    const level2S3Bucket = new Bucket(this, 'MyFirstLevel2ConstructBucket', {
      versioned: true
    });
  }
}


 cdk bootstrap aws://<account-name>/ap-south-1

Multi Account deployment:

lib/demo1-stack.ts

import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as s3 from 'aws-cdk-lib/aws-s3';

export class DemoStack1 extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const artifactBucket = new s3.Bucket(this, 'ArtifactBucket', {
      bucketName: "bucket-demo1-cdk-11111",
      removalPolicy: cdk.RemovalPolicy.DESTROY, // Change to RETAIN for production
      autoDeleteObjects: true, // Deletes objects when bucket is destroyed
    });


  }
}

lib/demo2-stack.ts

import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as s3 from 'aws-cdk-lib/aws-s3';

export class DemoStack2 extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const artifactBucket = new s3.Bucket(this, 'ArtifactBucket', {
        bucketName: "bucket-demo2-cdk-2222",
        removalPolicy: cdk.RemovalPolicy.DESTROY, // Change to RETAIN for production
        autoDeleteObjects: true, // Deletes objects when bucket is destroyed
      });

  }
}

bin/demo.ts

#!/usr/bin/env node
import 'source-map-support/register';
import * as cdk from 'aws-cdk-lib';
import { DemoStack1 } from '../lib/demo1-stack';
import { DemoStack2 } from '../lib/demo2-stack';

const app = new cdk.App();

const accountAEnv = { account: '<account-name>', region: 'ap-south-1' };
const accountBEnv = { account: '<account-name>', region: 'ap-south-1' };

// Instantiate stacks with specific environments
new DemoStack1(app, 'DemoStack1', { env: accountAEnv });
new DemoStack2(app, 'DemoStack2', { env: accountBEnv });

.aws/creds

[demo1]
aws_access_key_id = AAAAAAAAAAAAAAAAA
aws_secret_access_key = Cjdkdskkkkkkkkkkk

[demo2]
aws_access_key_id = AAAAAAAAAAAAAAAAA
aws_secret_access_key = Cdkdskkkkkkkkkkk

cdk bootstrap aws://<account-id>/ap-south-1 --profile demo2



cdk bootstrap aws://<account-name>/ap-south-1 --profile demo2

cdk deploy DemoStack1 --profile demo1
cdk deploy DemoStack2 --profile demo2

cdk destroy --all --app "npx ts-node --prefer-ts-exts bin/demo.ts"


npm i --save-dev @types/ini

Reference: https://docs.aws.amazon.com/cdk/v2/guide/environments.html 

https://stackoverflow.com/questions/61501910/how-to-deploy-aws-cdk-stacks-to-multiple-accounts

https://kreuzwerker.de/en/post/effectively-using-cdk-pipelines-to-deploy-cdk-stacks-into-multiple-accounts



https://medium.com/slalom-build/cross-account-deployment-pipelines-bc0ebb969050

https://garbe.io/blog/2022/08/01/hey-cdk-how-to-cross-account-deployments/











